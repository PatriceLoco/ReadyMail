name: Compile Library

on:
  push:
    paths-ignore:
      - '.github/workflows/cpp_lint.yml'
      - 'examples/**'
  pull_request:
    paths-ignore:
      - '.github/workflows/cpp_lint.yml'
      - 'examples/**'

jobs:
  esp32:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v4
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Install library
      run: | 
        pio lib -g install \
        https://github.com/mobizt/ReadyMail

    - name: Create main file
      run: |
        echo "#include <Arduino.h>" >> src/main.cpp
        echo "#include <WiFi.h>" >> src/main.cpp
        echo "#include <WiFiClientSecure.h>" >> src/main.cpp
        echo "#define ENABLE_IMAP" >> src/main.cpp
        echo "#define ENABLE_SMTP" >> src/main.cpp
        echo "#define ENABLE_DEBUG" >> src/main.cpp
        echo "#include <ReadyMail.h>" >> src/main.cpp
        echo "WiFiClientSecure ssl_client;" >> src/main.cpp
        echo "SMTPClient smtp(ssl_client);" >> src/main.cpp
        echo "IMAPClient imap(ssl_client);" >> src/main.cpp
        echo "void setup() {" >> src/main.cpp
        echo "ssl_client.setInsecure();" >> src/main.cpp
        echo "smtp.connect(\"smtp.gmail.com\", 465, \"127.0.0.1\", NULL);" >> src/main.cpp
        echo "imap.connect(\"imap.gmail.com\", 993, NULL);" >> src/main.cpp
        echo "}" >> src/main.cpp
        echo "void loop() {}" >> src/main.cpp

        echo "[env:esp32dev]" >> platformio.ini
        echo "platform = https://github.com/pioarduino/platform-espressif32/releases/download/53.03.12/platform-espressif32.zip" >> platformio.ini
        echo "board = esp32dev" >> platformio.ini
        echo "framework = arduino" >> platformio.ini


    - name: Run PlatformIO
      run: pio ci --project-conf="platformio.ini" src

  esp8266:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        board: 
          - "d1_mini"
    steps:
    - uses: actions/checkout@v4
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v4

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Install library
      run: | 
        pio lib -g install \
        https://github.com/mobizt/ReadyMail


    - name: Create main file
      run: |
        echo "#include <Arduino.h>" >> src/main.cpp
        echo "#include <ESP8266WiFi.h>" >> src/main.cpp
        echo "#include <WiFiClientSecure.h>" >> src/main.cpp
        echo "#define ENABLE_IMAP" >> src/main.cpp
        echo "#define ENABLE_SMTP" >> src/main.cpp
        echo "#define ENABLE_DEBUG" >> src/main.cpp
        echo "#include <ReadyMail.h>" >> src/main.cpp
        echo "WiFiClientSecure ssl_client;" >> src/main.cpp
        echo "SMTPClient smtp(ssl_client);" >> src/main.cpp
        echo "IMAPClient imap(ssl_client);" >> src/main.cpp
        echo "void setup() {" >> src/main.cpp
        echo "ssl_client.setInsecure();" >> src/main.cpp
        echo "smtp.connect(\"smtp.gmail.com\", 465, \"127.0.0.1\", NULL);" >> src/main.cpp
        echo "imap.connect(\"imap.gmail.com\", 993, NULL);" >> src/main.cpp
        echo "}" >> src/main.cpp

        echo "void loop() {}" >> src/main.cpp

    - name: Run PlatformIO
      run: pio ci --board=${{ matrix.board }} src

  mkrwifi1010_nanorp2040connect:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        board: 
          - "mkrwifi1010"
          - "nanorp2040connect"
    steps:
    - uses: actions/checkout@v4
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v4

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Install library
      run: | 
        pio lib -g install \
        https://github.com/mobizt/ReadyMail

        pio lib -g install \
        https://github.com/arduino-libraries/WiFiNINA


    - name: Create main file
      run: |
        echo "#include <Arduino.h>" >> src/main.cpp
        echo "#include <WiFiNINA.h>" >> src/main.cpp
        echo "#include <WiFiSSLClient.h>" >> src/main.cpp
        echo "#define ENABLE_IMAP" >> src/main.cpp
        echo "#define ENABLE_SMTP" >> src/main.cpp
        echo "#define ENABLE_DEBUG" >> src/main.cpp
        echo "#include <ReadyMail.h>" >> src/main.cpp
        echo "WiFiSSLClient ssl_client;" >> src/main.cpp
        echo "SMTPClient smtp(ssl_client);" >> src/main.cpp
        echo "IMAPClient imap(ssl_client);" >> src/main.cpp
        echo "void setup() {" >> src/main.cpp
        echo "smtp.connect(\"smtp.gmail.com\", 465, \"127.0.0.1\", NULL);" >> src/main.cpp
        echo "imap.connect(\"imap.gmail.com\", 993, NULL);" >> src/main.cpp
        echo "}" >> src/main.cpp
        echo "void loop() {}" >> src/main.cpp
        

    - name: Run PlatformIO
      run: pio ci --board=${{ matrix.board }} src

  mkr1000USB:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        board: 
          - "mkr1000USB"
    steps:
    - uses: actions/checkout@v4
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v4

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Install library
      run: | 
        pio lib -g install \
        https://github.com/mobizt/ReadyMail

        pio lib -g install \
        https://github.com/arduino-libraries/WiFi101


    - name: Create main file
      run: |
        echo "#include <Arduino.h>" >> src/main.cpp
        echo "#include <WiFi101.h>" >> src/main.cpp
        echo "#include <WiFiSSLClient.h>" >> src/main.cpp
        echo "#define ENABLE_IMAP" >> src/main.cpp
        echo "#define ENABLE_SMTP" >> src/main.cpp
        echo "#define ENABLE_DEBUG" >> src/main.cpp
        echo "#include <ReadyMail.h>" >> src/main.cpp
        echo "WiFiSSLClient ssl_client;" >> src/main.cpp
        echo "SMTPClient smtp(ssl_client);" >> src/main.cpp
        echo "IMAPClient imap(ssl_client);" >> src/main.cpp
        echo "void setup() {" >> src/main.cpp
        echo "smtp.connect(\"smtp.gmail.com\", 465, \"127.0.0.1\", NULL);" >> src/main.cpp
        echo "imap.connect(\"imap.gmail.com\", 993, NULL);" >> src/main.cpp
        echo "}" >> src/main.cpp
        echo "void loop() {}" >> src/main.cpp
        

    - name: Run PlatformIO
      run: pio ci --board=${{ matrix.board }} src

  teensy_stm32:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        board: 
          - "genericSTM32F103RC"
          - "teensy41"
    steps:
    - uses: actions/checkout@v4
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v4

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Install library
      run: | 
        pio lib -g install \
        https://github.com/mobizt/ReadyMail

        pio lib -g install \
        https://github.com/arduino-libraries/Ethernet

        pio lib -g install \
        https://github.com/mobizt/ESP_SSLClient


    - name: Create main file
      run: |
        echo "#include <Arduino.h>" >> src/main.cpp
        echo "#include <Ethernet.h>" >> src/main.cpp
        echo "#include <ESP_SSLClient.h>" >> src/main.cpp
        echo "#define ENABLE_IMAP" >> src/main.cpp
        echo "#define ENABLE_SMTP" >> src/main.cpp
        echo "#define ENABLE_DEBUG" >> src/main.cpp
        echo "#include <ReadyMail.h>" >> src/main.cpp
        echo "EthernetClient basic_client;" >> src/main.cpp
        echo "ESP_SSLClient ssl_client;" >> src/main.cpp
        echo "SMTPClient smtp(ssl_client);" >> src/main.cpp
        echo "IMAPClient imap(ssl_client);" >> src/main.cpp
        echo "void setup() {" >> src/main.cpp
        echo "ssl_client.setClient(&basic_client);" >> src/main.cpp
        echo "ssl_client.setInsecure();" >> src/main.cpp
        echo "smtp.connect(\"smtp.gmail.com\", 465, \"127.0.0.1\", NULL);" >> src/main.cpp
        echo "imap.connect(\"imap.gmail.com\", 993, NULL);" >> src/main.cpp
        echo "}" >> src/main.cpp
        echo "void loop() {}" >> src/main.cpp
        

    - name: Run PlatformIO
      run: pio ci --board=${{ matrix.board }} src


  uno_r4_wifi:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        board: 
          - "uno_r4_wifi"
    steps:
    - uses: actions/checkout@v4
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v4

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Install library
      run: | 
        pio lib -g install \
        https://github.com/mobizt/ReadyMail


    - name: Create main file
      run: |
        echo "#include <Arduino.h>" >> src/main.cpp
        echo "#include <WiFiS3.h>" >> src/main.cpp
        echo "#include <WiFiSSLClient.h>" >> src/main.cpp
        echo "#define ENABLE_IMAP" >> src/main.cpp
        echo "#define ENABLE_SMTP" >> src/main.cpp
        echo "#define ENABLE_DEBUG" >> src/main.cpp
        echo "#include <ReadyMail.h>" >> src/main.cpp
        echo "WiFiSSLClient ssl_client;" >> src/main.cpp
        echo "SMTPClient smtp(ssl_client);" >> src/main.cpp
        echo "IMAPClient imap(ssl_client);" >> src/main.cpp
        echo "void setup() {" >> src/main.cpp
        echo "smtp.connect(\"smtp.gmail.com\", 465, \"127.0.0.1\", NULL);" >> src/main.cpp
        echo "imap.connect(\"imap.gmail.com\", 993, NULL);" >> src/main.cpp
        echo "}" >> src/main.cpp
        echo "void loop() {}" >> src/main.cpp
        

    - name: Run PlatformIO
      run: pio ci --board=${{ matrix.board }} src

  portenta_c33:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        board: 
          - "portenta_c33"
    steps:
    - uses: actions/checkout@v4
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v4

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Install library
      run: | 
        pio lib -g install \
        https://github.com/mobizt/ReadyMail


    - name: Create main file
      run: |
        echo "#include <Arduino.h>" >> src/main.cpp
        echo "#include <SPI.h>" >> src/main.cpp
        echo "#include <WiFiC3.h>" >> src/main.cpp
        echo "#include <WiFiSSLClient.h>" >> src/main.cpp
        echo "#define ENABLE_IMAP" >> src/main.cpp
        echo "#define ENABLE_SMTP" >> src/main.cpp
        echo "#define ENABLE_DEBUG" >> src/main.cpp
        echo "#include <ReadyMail.h>" >> src/main.cpp
        echo "WiFiSSLClient ssl_client;" >> src/main.cpp
        echo "SMTPClient smtp(ssl_client);" >> src/main.cpp
        echo "IMAPClient imap(ssl_client);" >> src/main.cpp
        echo "void setup() {" >> src/main.cpp
        echo "smtp.connect(\"smtp.gmail.com\", 465, \"127.0.0.1\", NULL);" >> src/main.cpp
        echo "imap.connect(\"imap.gmail.com\", 993, NULL);" >> src/main.cpp
        echo "}" >> src/main.cpp
        echo "void loop() {}" >> src/main.cpp
        

    - name: Run PlatformIO
      run: pio ci --board=${{ matrix.board }} src

  picow:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v4
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Install library
      run: | 
        pio lib -g install \
        https://github.com/mobizt/ReadyMail

    - name: Create main file
      run: |
        echo "#include <Arduino.h>" >> src/main.cpp
        echo "#include <WiFi.h>" >> src/main.cpp
        echo "#include <WiFiClientSecure.h>" >> src/main.cpp
        echo "#define ENABLE_IMAP" >> src/main.cpp
        echo "#define ENABLE_SMTP" >> src/main.cpp
        echo "#define ENABLE_DEBUG" >> src/main.cpp
        echo "#include <ReadyMail.h>" >> src/main.cpp
        echo "WiFiClientSecure ssl_client;" >> src/main.cpp
        echo "SMTPClient smtp(ssl_client);" >> src/main.cpp
        echo "IMAPClient imap(ssl_client);" >> src/main.cpp
        echo "void setup() {" >> src/main.cpp
        echo "ssl_client.setInsecure();" >> src/main.cpp
        echo "smtp.connect(\"smtp.gmail.com\", 465, \"127.0.0.1\", NULL);" >> src/main.cpp
        echo "imap.connect(\"imap.gmail.com\", 993, NULL);" >> src/main.cpp
        echo "}" >> src/main.cpp
        echo "void loop() {}" >> src/main.cpp

        echo "[env:rpipicow]" >> platformio.ini
        echo "platform = https://github.com/maxgerhardt/platform-raspberrypi.git" >> platformio.ini
        echo "board = rpipicow" >> platformio.ini
        echo "framework = arduino" >> platformio.ini
        echo "board_build.core = earlephilhower" >> platformio.ini


    - name: Run PlatformIO
      run: pio ci --project-conf="platformio.ini" src
